Group E project for 4300...


link to files...
https://livecsupomona-my.sharepoint.com/my?id=%2Fpersonal%2Fiblekhman%5Fcpp%5Fedu%2FDocuments%2FDocuments%2Ezip&parent=%2Fpersonal%2Fiblekhman%5Fcpp%5Fedu%2FDocuments&ga=1 




A couple of notes for the project...
the virtual machines lack turbo boost(run at your max pre boost clock)


Single Vs Parallel Processing

To limit the CPU frequency we need [sudo apt-get install cpulimit]

EX: 
#!/bin/bash

openssl_command="openssl dgst -sha3-256 file.xz"
$openssl_command & 

pid=$(pgrep -f "$openssl_command")

if [ -z "$pid" ];
then
  echo "Error: OpenSSL process not found."
  exit 1
fi

echo "OpenSSL PID: $pid"  # Print the PID for verification

cpu_limit=90
sudo cpulimit -v -p $pid -l $cpu_limit  # Verbose output

echo "OpenSSL process (PID $pid) is now limited to $cpu_limit% CPU usage."




To run using parallel processing we use [sudo apt-get install parallel]
EX:

#!/bin/bash

lxterminal --command="htop" &

start_time=$(date +%s.%N)

time openssl dgst -sha3-256 file.xz

time openssl dgst -sha3-256 file2.exe

end_time=$(date +%s.%N)

total_time=$(echo "scale=3; ($end_time - $start_time)" | bc)

echo "Total execution time: $total_time seconds"

parallel openssl dgst -sha3-256 ::: file.xz file2.exe



Some notes 


Factors Affecting SHA-3 Hashing Speed

CPU Architecture and Speed:

Clock Speed: A faster CPU clock speed directly translates to faster hashing.
Core Count: Modern CPUs with multiple cores can potentially parallelize hashing operations, especially for larger files.
Instruction Sets: CPUs with specialized instructions for cryptographic operations (e.g., AES-NI) can significantly accelerate SHA-3 hashing.
File Size:

Larger Files = More Time: Hashing larger files takes longer because the algorithm needs to process more data.
Block Size: SHA-3 processes data in blocks. Larger block sizes can improve efficiency, but there's a trade-off with memory usage.   
Implementation and Optimization:

Software Library: Different SHA-3 implementations (e.g., OpenSSL, libsodium) can have varying levels of optimization.
Compiler Optimizations: How the code is compiled can affect the efficiency of the resulting executable.   
Assembly Language: Hand-optimized assembly code can sometimes provide the fastest performance.
Other Factors:

Memory Speed: Faster memory access can improve hashing speed, especially for larger files.
Storage I/O: If reading the file from a slow storage device is a bottleneck, it will limit the overall hashing speed.
